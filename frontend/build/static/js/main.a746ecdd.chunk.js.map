{"version":3,"sources":["components/GoogleMap.js","App.js","reportWebVitals.js","index.js"],"names":["MapContainer","props","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","setState","onMapClicked","displayMarkers","attractions","map","index","id","position","lat","latitude","lng","longitude","google","this","containerStyle","maxWidth","height","style","width","initialCenter","zoom","onClick","Component","GoogleApiWrapper","apiKey","StatCard1","label","className","App","GoogleMap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAIaA,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,MAAQ,CACNC,mBAAmB,EACnBC,aAAc,GACdC,cAAe,IAfE,EAmBnBC,cAAgB,SAACL,EAAOM,EAAQC,GAAhB,OACd,EAAKC,SAAS,CACZJ,cAAeJ,EACfG,aAAcG,EACdJ,mBAAmB,KAvBJ,EA0BnBO,aAAe,SAACT,GACV,EAAKC,MAAMC,mBACb,EAAKM,SAAS,CACZN,mBAAmB,EACnBC,aAAc,QA9BD,EAmCnBO,eAAiB,WACb,OAAO,EAAKT,MAAMU,YAAYC,KAAI,SAACD,EAAaE,GAC9C,OAAO,cAAC,SAAD,CAAoBC,GAAID,EAAOE,SAAU,CAC/CC,IAAKL,EAAYM,SACjBC,IAAKP,EAAYQ,YAFEN,OAlCtB,EAAKZ,MAAQ,CACXU,YAAa,CAAC,CAACM,SAAU,SAAWE,WAAY,UACxC,CAACF,SAAU,UAAWE,WAAY,WAClC,CAACF,SAAU,UAAWE,WAAY,WAClC,CAACF,SAAU,SAAWE,WAAY,aAP7B,EADvB,0CA8CI,WACE,OACE,cAAC,MAAD,CAAKC,OAAQC,KAAKrB,MAAMoB,OAGpBE,eAAgB,CAAEC,SAAU,MAAOC,OAAQ,SAC3CC,MAAO,CAACC,MAAO,OAAQF,OAAQ,OAAQT,SAAU,YAKjDY,cAAe,CACXX,IAAK,QACLE,KAAM,SAEVU,KAAM,GACNC,QAASR,KAAKZ,aAdlB,SAgBGY,KAAKX,uBAhEhB,GAAkCoB,aAsEjBC,6BAAiB,CAC9BC,OAAS,2CADID,CAEZhC,GCvEL,SAASkC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACnB,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKA,UAAU,YAAf,SAEE,iCAASD,MAEX,2BA+CSE,MA1Bf,WACE,OACE,sBAAKD,UAAU,MAAf,UACE,0CACA,sBAAKA,UAAY,SAAjB,UACE,sBAAKA,UAAY,YAAjB,UACE,cAACF,EAAD,CAAWC,MAAM,wBACjB,cAACD,EAAD,CAAWC,MAAM,yCAMnB,qBAAKC,UAAU,MAAf,SACE,cAACE,EAAD,aCnCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a746ecdd.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\n\nexport class MapContainer extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          attractions: [{latitude: 40.427790, longitude: -86.916960}, // Lawson\n                  {latitude: 40.428313, longitude: -86.922457}, //Co rec sports center\n                  {latitude: 40.424995, longitude: -86.915833}, //Founders Park\n                  {latitude: 40.434460, longitude: -86.918449} //Ross Ade Stadium\n                  ]\n        }\n      }\n\n    state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n    };\n\n   \n    onMarkerClick = (props, marker, e) =>\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n   \n    onMapClicked = (props) => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        })\n      }\n    };\n\n    displayMarkers = () => {\n        return this.state.attractions.map((attractions, index) => {\n          return <Marker key={index} id={index} position={{\n           lat: attractions.latitude,\n           lng: attractions.longitude\n         }}\n         />\n        })\n      }\n   \n    render() {\n      return (\n        <Map google={this.props.google}\n            \n        \n            containerStyle={{ maxWidth: \"50%\", height: \"83.5%\" }}\n            style={{width: '100%', height: '100%', position: 'relative'}}\n        \n        \n            \n            \n            initialCenter={{\n                lat: 40.4237,\n                lng: -86.9212\n            }}\n            zoom={14}\n            onClick={this.onMapClicked}>\n          \n          {this.displayMarkers()}        \n        </Map>\n      )\n    }\n  }\n\n  export default GoogleApiWrapper({\n    apiKey: ('AIzaSyC3RmyXyx5rURrCYvF5RNOa8GJ8DfsFFMA')\n  })(MapContainer)\n","import './App.css';\nimport GoogleMap from './components/GoogleMap';\n\n\n\nfunction StatCard1({ label}) {\n  return (\n    <div className=\"stat-card1\">\n      <div className=\"stat-line\">\n\n        <strong>{label}</strong>\n      </div>\n      <div>\n        \n      \n        \n      </div>\n    \n    </div>\n  );\n}\nfunction StatCard({ label, number}) {\n  return (\n    <div className=\"stat-card\">\n      <div className=\"stat-line\">\n\n        <strong>{label}</strong>\n      </div>\n      <p>{number.toLocaleString()}</p>\n    </div>\n  );\n}\n\nfunction App() {\n  return(\n    <div className=\"App\">\n      <h1>AI Azure</h1>\n      <div className = \"middle\">\n        <div className = \"dashboard\">\n          <StatCard1 label=\"General Information\"/>\n          <StatCard1 label=\"Top 3 Not Socially Distanced Area\"/>\n          \n          \n          \n        </div>\n        \n        <div className=\"map\">\n          <GoogleMap />\n        </div>\n        \n      </div>\n        \n        \n\n    </div>\n    \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/GoogleMap.js","App.js","reportWebVitals.js","index.js"],"names":["GoogleApiWrapper","apiKey","updateFunction","entries","google","zoom","containerStyle","maxWidth","height","position","style","width","initialCenter","lat","lng","map","entry","name","location","coordinates","onClick","App","useState","setEntries","newTime","setNewTime","newDate","setNewDate","time","Date","toISOString","slice","date","current","setCurrent","getData","pdate","ptime","fetch","URLSearchParams","then","response","json","data","console","log","newData","parseFloat","latitude","longitude","catch","error","useEffect","a","dataToShow","updateData","id","class","people","violations","placeholder","value","onChange","e","target","GoogleMap","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.536ff664.chunk.js","sourcesContent":["import React, { useState,  useEffect } from 'react'\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nconst MapContainer = ({updateFunction, entries, google}) => {\n\n    return (\n        <Map\n            google = {google}\n            zoom={14}\n            containerStyle={{ maxWidth: \"80%\", height: \"80%\", position:\"relative\" }}\n            style={{\n                width: '700px', height: '700px',\n            }}\n            initialCenter={{\n                lat: 40.4237,\n                lng: -86.9212\n            }}\n        >\n            {entries.map(entry => (\n                <Marker\n                    name = {entry.location.name}\n                    position = {entry.coordinates}\n                    onClick = {() => {\n                        updateFunction(entry);\n                    }}\n                />\n            ))}\n        </Map>\n    )\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyC3RmyXyx5rURrCYvF5RNOa8GJ8DfsFFMA')\n})(MapContainer)","import \"./App.css\"\nimport React, { useState, useEffect } from 'react'\n\nimport GoogleMap from \"./components/GoogleMap\"\n\nconst App = () => {\n\n    const [entries, setEntries] = useState([])\n\n    const [newTime, setNewTime] = useState(\"\")\n    const [newDate, setNewDate] = useState(\"\")\n\n    const [current, setCurrent] = useState({\n        time: new Date().toISOString().slice(0, 10),\n        date: new Date().toISOString().slice(11, 19)\n    })\n\n    const getData = (pdate, ptime) => {\n        let date = pdate || new Date().toISOString().slice(0, 10);\n        let time = ptime || new Date().toISOString().slice(11, 19);\n        setCurrent({\n            time: time,\n            date: date\n        });\n        fetch(\"https://covid-db-access.azurewebsites.net/api/getentryfromtime?\" + new URLSearchParams({\n            time: date + \" \" + time\n        })).then(response => {\n            return response.json();\n        }).then(data => {\n            console.log(\"nice\");\n            let newData = data.map(entry => {\n                return {...entry, coordinates: {\n                    lat: parseFloat(entry.location.latitude),\n                    lng: parseFloat(entry.location.longitude)\n                }}\n            })\n            setEntries(newData);\n        }).catch(error => {\n            console.log(\"error!\", error)\n        })\n        \n    }\n\n    useEffect(async () => {\n        let response = await fetch(\"https://covid-db-access.azurewebsites.net/api/getrecent\");\n        let data = await response.json();\n        await getData(data.time.slice(0, 10), data.time.slice(11, 19));\n    }, [])\n\n    const [dataToShow, updateData] = useState({});\n\n    const handleUpdateData = (entry) => {\n        updateData(entry);\n    }\n\n    return (\n        <div id=\"container\">\n            <h1 id = \"title\">HealthEye</h1>\n            <div id = \"dashboard\">\n                <div class= \"stats\">\n                    <h1>General Information</h1>\n                    <ul>\n                        <li>People Count: {dataToShow.people || 0} </li>\n                        <li>Social distance violations: {dataToShow.violations || 0}</li>\n                        <li>Location Name: {dataToShow.location ? dataToShow.location.name : \"none specified\"}</li>\n                    </ul>\n                    <p>Showing {current.time} on {current.date}</p>\n                    <h3>Choose a date:</h3>\n                    <p>Enter in yyyy-mm-dd format</p>\n                    <input placeholder = {current.date} value = {newDate} onChange = {e => {\n                        setNewDate(e.target.value);\n                    }}/>\n                    <h3>Choose a time:</h3>\n                    <p>Enter in hh:mm:ss format</p>\n                    <input placeholder = {current.time} value = {newTime} onChange = {e => {\n                        setNewTime(e.target.value);\n                    }}/>\n                    <br></br>\n                    <br></br>\n                    <button onClick = {() => {\n                        getData(newDate, newTime);\n                    }}>Refresh</button>\n                    <h4>Note: work in progress</h4>\n                    <p>Some test values</p>\n                    <ul id = \"note\">\n                        <li>Date: 2021-04-01</li>\n                        <li>Time: 12:01:21 up to 12:50:21</li>\n                    </ul>\n                </div>\n                <div>\n                    <GoogleMap updateFunction = {handleUpdateData} entries = {entries}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}